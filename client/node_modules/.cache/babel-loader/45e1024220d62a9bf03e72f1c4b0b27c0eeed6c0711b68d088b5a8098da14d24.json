{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\mymessange\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    socket.on('message', msg => {\n      setMessages(prevMessages => [...prevMessages, msg]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const sendMessage = () => {\n    axios.post('http://localhost:5000/messages', {\n      message: message\n    }).then(response => {\n      console.log(response.data); // Опционально - можно обработать ответ сервера\n    }).catch(error => {\n      console.error('Ошибка при отправке сообщения:', error);\n    });\n    setMessage('');\n  };\n  messages.map((msg, index) => {\n    console.log(msg, index);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: msg\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: message,\n      onChange: handleMessageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9iyGj6dRHK6V1mxAAjlNUec9m4A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","axios","jsxDEV","_jsxDEV","socket","App","_s","messages","setMessages","message","setMessage","on","msg","prevMessages","disconnect","handleMessageChange","e","target","value","sendMessage","post","then","response","console","log","data","catch","error","map","index","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/mymessange/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport axios from 'axios';\n\nconst socket = io('http://localhost:5000');\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    socket.on('message', (msg) => {\n      setMessages((prevMessages) => [...prevMessages, msg]);\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const sendMessage = () => {\n    axios.post('http://localhost:5000/messages', { message: message })\n      .then((response) => {\n        console.log(response.data); // Опционально - можно обработать ответ сервера\n      })\n      .catch((error) => {\n        console.error('Ошибка при отправке сообщения:', error);\n      });\n    setMessage('');\n  };\n\n  messages.map((msg, index) => {\n    console.log(msg, index)\n  })\n\n  return (\n    <div>\n      <ul>\n        {messages.map((msg, index) => (\n          <li key={index}>{msg}</li>\n\n        ))}\n      </ul>\n      <input type=\"text\" value={message} onChange={handleMessageChange} />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGJ,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACdK,MAAM,CAACO,EAAE,CAAC,SAAS,EAAGC,GAAG,IAAK;MAC5BJ,WAAW,CAAEK,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,GAAG,CAAC,CAAC;IACvD,CAAC,CAAC;IAEF,OAAO,MAAM;MACXR,MAAM,CAACU,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,mBAAmB,GAAIC,CAAC,IAAK;IACjCN,UAAU,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBlB,KAAK,CAACmB,IAAI,CAAC,gCAAgC,EAAE;MAAEX,OAAO,EAAEA;IAAQ,CAAC,CAAC,CAC/DY,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBJ,OAAO,CAACI,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,CAAC;IACJjB,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAEDH,QAAQ,CAACqB,GAAG,CAAC,CAAChB,GAAG,EAAEiB,KAAK,KAAK;IAC3BN,OAAO,CAACC,GAAG,CAACZ,GAAG,EAAEiB,KAAK,CAAC;EACzB,CAAC,CAAC;EAEF,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,EACGvB,QAAQ,CAACqB,GAAG,CAAC,CAAChB,GAAG,EAAEiB,KAAK,kBACvB1B,OAAA;QAAA2B,QAAA,EAAiBlB;MAAG,GAAXiB,KAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAE1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACL/B,OAAA;MAAOgC,IAAI,EAAC,MAAM;MAACjB,KAAK,EAAET,OAAQ;MAAC2B,QAAQ,EAAErB;IAAoB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpE/B,OAAA;MAAQkC,OAAO,EAAElB,WAAY;MAAAW,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAAC5B,EAAA,CA7CQD,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}